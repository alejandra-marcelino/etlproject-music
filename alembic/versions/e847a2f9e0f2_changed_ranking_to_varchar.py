"""changed ranking to varchar

Revision ID: e847a2f9e0f2
Revises: 4e21de66f12e
Create Date: 2023-05-30 16:52:01.677330

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'e847a2f9e0f2'
down_revision = '4e21de66f12e'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('tracks')
    op.drop_table('artist_album')
    op.drop_table('artist_genre')
    op.drop_table('festivals')
    op.drop_table('albums')
    op.drop_table('artists')
    op.drop_table('top_tracks')
    op.drop_table('concert_genre')
    op.drop_table('concerts')
    op.drop_table('audio_features')
    op.drop_table('genres')
    op.drop_table('artist_track')
    op.drop_table('data_dictionary')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('data_dictionary',
    sa.Column('id', sa.SMALLINT(), server_default=sa.text("nextval('data_dictionary_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('descrition', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='data_dictionary_pkey')
    )
    op.create_table('artist_track',
    sa.Column('artist_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('track_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.artist_id'], name='artist_track_artist_id_fkey'),
    sa.ForeignKeyConstraint(['track_id'], ['tracks.track_id'], name='artist_track_track_id_fkey')
    )
    op.create_table('genres',
    sa.Column('genre_id', sa.SMALLINT(), server_default=sa.text("nextval('genres_genre_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('genre_id', name='genres_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('audio_features',
    sa.Column('track_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['track_id'], ['tracks.track_id'], name='audio_features_track_id_fkey'),
    sa.PrimaryKeyConstraint('track_id', name='audio_features_pkey')
    )
    op.create_table('concerts',
    sa.Column('concert_id', sa.INTEGER(), server_default=sa.text("nextval('concerts_concert_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('performer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('venue', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('concertful_ranking', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('concert_id', name='concerts_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('concert_genre',
    sa.Column('concert_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('genre_id', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['concert_id'], ['concerts.concert_id'], name='concert_genre_concert_id_fkey'),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.genre_id'], name='concert_genre_genre_id_fkey')
    )
    op.create_table('top_tracks',
    sa.Column('date_on_top', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('rank_number', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('track_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['track_id'], ['tracks.track_id'], name='top_tracks_track_id_fkey'),
    sa.PrimaryKeyConstraint('date_on_top', 'rank_number', name='top_tracks_pkey')
    )
    op.create_table('artists',
    sa.Column('artist_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('artist_id', name='artists_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('albums',
    sa.Column('album_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('album_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('release_date', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('total_tracks', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('album_id', name='albums_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('festivals',
    sa.Column('festival_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('performer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('venue', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('concertful_ranking', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('festival_id', name='festivals_pkey')
    )
    op.create_table('artist_genre',
    sa.Column('artist_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('genre_id', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.artist_id'], name='artist_genre_artist_id_fkey'),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.genre_id'], name='artist_genre_genre_id_fkey')
    )
    op.create_table('artist_album',
    sa.Column('artist_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['album_id'], ['albums.album_id'], name='artist_album_album_id_fkey'),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.artist_id'], name='artist_album_artist_id_fkey')
    )
    op.create_table('tracks',
    sa.Column('track_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('album_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['album_id'], ['albums.album_id'], name='tracks_album_id_fkey'),
    sa.PrimaryKeyConstraint('track_id', name='tracks_pkey')
    )
    # ### end Alembic commands ###
