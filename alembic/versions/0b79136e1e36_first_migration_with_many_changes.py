"""First migration with many changes

Revision ID: 0b79136e1e36
Revises: 
Create Date: 2023-05-29 18:46:09.380043

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '0b79136e1e36'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('session')
    op.drop_table('dag_tag')
    op.drop_table('tracks')
    #op.drop_table('audio_features')
    op.drop_table('dag_schedule_dataset_reference')
    # op.drop_table('genres')
    op.drop_index('idx_task_reschedule_dag_run', table_name='task_reschedule')
    op.drop_index('idx_task_reschedule_dag_task_run', table_name='task_reschedule')
    op.drop_table('task_reschedule')
    op.drop_index('ix_top50_2023_05_05_index', table_name='top50_2023_05_05')
    op.drop_table('top50_2023_05_05')
    #op.drop_table('log_template')
    op.drop_index('ix_top50_2023_04_29_index', table_name='top50_2023_04_29')
    op.drop_table('top50_2023_04_29')
    op.drop_table('callback_request')
    op.drop_table('dag_code')
    op.drop_table('import_error')
    op.drop_index('ix_top50_2023_05_10_index', table_name='top50_2023_05_10')
    op.drop_table('top50_2023_05_10')
    op.drop_table('festival_genre')
    op.drop_index('ix_data_dict_index', table_name='data_dict')
    op.drop_table('data_dict')
    op.drop_table('data_dictionary')
    op.drop_table('connection')
    op.drop_index('ix_artists_info_2023_05_02_index', table_name='artists_info_2023_05_02')
    op.drop_table('artists_info_2023_05_02')
    op.drop_index('ix_artists_info_2023_05_05_index', table_name='artists_info_2023_05_05')
    op.drop_table('artists_info_2023_05_05')
    op.drop_index('ix_artists_info_2023_05_10_index', table_name='artists_info_2023_05_10')
    op.drop_table('artists_info_2023_05_10')
    op.drop_table('slot_pool')
    op.drop_table('rendered_task_instance_fields')
    op.drop_index('ix_top50_2023_05_08_index', table_name='top50_2023_05_08')
    op.drop_table('top50_2023_05_08')
    op.drop_index('idx_next_dagrun_create_after', table_name='dag')
    op.drop_index('idx_root_dag_id', table_name='dag')
    op.execute('DROP TABLE dag CASCADE')
    op.drop_index('ix_artists_info_2023_04_29_index', table_name='artists_info_2023_04_29')
    op.drop_table('artists_info_2023_04_29')
    op.drop_index('idx_dagrun_dataset_events_dag_run_id', table_name='dagrun_dataset_event')
    op.drop_index('idx_dagrun_dataset_events_event_id', table_name='dagrun_dataset_event')
    op.drop_table('dagrun_dataset_event')
    op.drop_table('dag_pickle')
    op.drop_index('ix_artists_info_2023_05_03_index', table_name='artists_info_2023_05_03')
    op.drop_table('artists_info_2023_05_03')
    op.drop_index('idx_uri_unique', table_name='dataset')
    op.execute('DROP TABLE dataset CASCADE')
    op.drop_index('ix_artists_info_2023_04_27_index', table_name='artists_info_2023_04_27')
    op.drop_table('artists_info_2023_04_27')
    op.drop_index('idx_log_dag', table_name='log')
    op.drop_index('idx_log_dttm', table_name='log')
    op.drop_index('idx_log_event', table_name='log')
    op.drop_table('log')
    op.drop_index('idx_fileloc_hash', table_name='serialized_dag')
    op.drop_table('serialized_dag')
    op.execute('DROP TABLE ab_permission_view_role CASCADE')
    op.drop_table('ab_user_role')
    op.execute('DROP TABLE albums CASCADE')
    op.drop_index('ti_dag_run', table_name='task_instance')
    op.drop_index('ti_dag_state', table_name='task_instance')
    op.drop_index('ti_job_id', table_name='task_instance')
    op.drop_index('ti_pool', table_name='task_instance')
    op.drop_index('ti_state', table_name='task_instance')
    op.drop_index('ti_state_lkp', table_name='task_instance')
    op.drop_index('ti_trigger_id', table_name='task_instance')
    op.execute('DROP TABLE task_instance CASCADE')
    op.drop_index('ix_artists_info_2023_04_25_index', table_name='artists_info_2023_04_25')
    op.drop_table('artists_info_2023_04_25')
    op.drop_index('ix_artists_info_2023_05_09_index', table_name='artists_info_2023_05_09')
    op.drop_table('artists_info_2023_05_09')
    op.drop_table('artist_track')
    op.execute('DROP TABLE concerts CASCADE')
    op.drop_index('ix_top50_2023_05_02_index', table_name='top50_2023_05_02')
    op.drop_table('top50_2023_05_02')
    op.drop_table('top_tracks')
    op.drop_table('audio_features')
    op.drop_table('trigger')
    op.drop_index('idx_task_fail_task_instance', table_name='task_fail')
    op.drop_table('task_fail')
    op.drop_table('task_instance_note')
    op.drop_index('ix_artists_info_2023_05_11_index', table_name='artists_info_2023_05_11')
    op.drop_table('artists_info_2023_05_11')
    op.drop_table('variable')
    op.drop_table('artist_genre')
    op.drop_index('ix_top50_2023_04_25_index', table_name='top50_2023_04_25')
    op.drop_table('top50_2023_04_25')
    op.drop_table('concert_genre')
    op.drop_table('genres')
    op.drop_table('artist_album')
    op.drop_index('sm_dag', table_name='sla_miss')
    op.drop_table('sla_miss')
    op.drop_index('ix_top50_2023_04_27_index', table_name='top50_2023_04_27')
    op.drop_table('top50_2023_04_27')
    op.drop_index('ix_top50_2023_05_03_index', table_name='top50_2023_05_03')
    op.drop_table('top50_2023_05_03')
    op.drop_index('ix_top50_2023_04_28_index', table_name='top50_2023_04_28')
    op.drop_table('top50_2023_04_28')
    op.drop_index('idx_xcom_key', table_name='xcom')
    op.drop_index('idx_xcom_task_instance', table_name='xcom')
    op.drop_table('xcom')
    op.drop_index('ix_top50_2023_05_09_index', table_name='top50_2023_05_09')
    op.drop_table('top50_2023_05_09')
    op.drop_table('artists')
    op.drop_index('idx_dataset_id_timestamp', table_name='dataset_event')
    op.drop_table('dataset_event')
    op.drop_index('idx_job_dag_id', table_name='job')
    op.drop_index('idx_job_state_heartbeat', table_name='job')
    op.drop_index('job_type_heart', table_name='job')
    op.drop_table('job')
    op.execute('DROP TABLE ab_permission CASCADE')
    op.drop_index('ix_top50_tracks_index', table_name='top50_tracks')
    op.drop_table('top50_tracks')
    op.drop_index('ix_artists_info_2023_04_28_index', table_name='artists_info_2023_04_28')
    op.drop_table('artists_info_2023_04_28')
    op.drop_index('ix_top50_2023_05_11_index', table_name='top50_2023_05_11')
    op.drop_table('top50_2023_05_11')
    op.drop_table('dag_owner_attributes')
    op.execute('DROP TABLE ab_user CASCADE')
    op.drop_table('dataset_dag_run_queue')
    op.drop_table('festivals')
    op.drop_index('dag_id_state', table_name='dag_run')
    op.drop_index('idx_dag_run_dag_id', table_name='dag_run')
    op.drop_index('idx_dag_run_queued_dags', table_name='dag_run')
    op.drop_index('idx_dag_run_running_dags', table_name='dag_run')
    op.drop_index('idx_last_scheduling_decision', table_name='dag_run')
    op.execute('DROP TABLE dag_run CASCADE')
    op.drop_table('log_template')
    op.drop_table('dag_warning')
    op.drop_table('task_map')
    op.drop_index('ix_artists_info_2023_05_08_index', table_name='artists_info_2023_05_08')
    op.drop_table('artists_info_2023_05_08')
    op.execute('DROP TABLE ab_view_menu CASCADE')
    #op.drop_table('ab_permission_view_role')
    op.drop_table('ab_role')
    op.drop_table('task_outlet_dataset_reference')
    op.drop_table('ab_register_user')
    op.drop_table('dag_run_note')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('dag_run_note',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('dag_run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_run_id'], ['dag_run.id'], name='dag_run_note_dr_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['ab_user.id'], name='dag_run_note_user_fkey'),
    sa.PrimaryKeyConstraint('dag_run_id', name='dag_run_note_pkey')
    )
    op.create_table('ab_register_user',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('registration_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('registration_hash', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='ab_register_user_pkey'),
    sa.UniqueConstraint('username', name='ab_register_user_username_uq')
    )
    op.create_table('task_outlet_dataset_reference',
    sa.Column('dataset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name='todr_dag_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], name='todr_dataset_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dataset_id', 'dag_id', 'task_id', name='todr_pkey')
    )
    op.create_table('ab_role',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('ab_role_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='ab_role_pkey'),
    sa.UniqueConstraint('name', name='ab_role_name_uq'),
    postgresql_ignore_search_path=False
    )
    op.create_table('ab_permission_view_role',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('permission_view_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['permission_view_id'], ['ab_permission_view.id'], name='ab_permission_view_role_permission_view_id_fkey'),
    sa.ForeignKeyConstraint(['role_id'], ['ab_role.id'], name='ab_permission_view_role_role_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ab_permission_view_role_pkey'),
    sa.UniqueConstraint('permission_view_id', 'role_id', name='ab_permission_view_role_permission_view_id_role_id_uq')
    )
    op.create_table('ab_view_menu',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('ab_view_menu_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='ab_view_menu_pkey'),
    sa.UniqueConstraint('name', name='ab_view_menu_name_uq'),
    postgresql_ignore_search_path=False
    )
    op.create_table('artists_info_2023_05_08',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_05_08_index', 'artists_info_2023_05_08', ['index'], unique=False)
    op.create_table('task_map',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('length', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('keys', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.CheckConstraint('length >= 0', name='ck_task_map_task_map_length_not_negative'),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name='task_map_task_instance_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_id', 'task_id', 'run_id', 'map_index', name='task_map_pkey')
    )
    op.create_table('dag_warning',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('warning_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name='dcw_dag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_id', 'warning_type', name='dag_warning_pkey')
    )
    op.create_table('dag_run',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('dag_run_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('queued_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('execution_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('creating_job_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('external_trigger', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('run_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('conf', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('data_interval_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('data_interval_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_scheduling_decision', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('dag_hash', sa.VARCHAR(length=32), autoincrement=False, nullable=True),
    sa.Column('log_template_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['log_template_id'], ['log_template.id'], name='task_instance_log_template_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='dag_run_pkey'),
    sa.UniqueConstraint('dag_id', 'execution_date', name='dag_run_dag_id_execution_date_key'),
    sa.UniqueConstraint('dag_id', 'run_id', name='dag_run_dag_id_run_id_key'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_last_scheduling_decision', 'dag_run', ['last_scheduling_decision'], unique=False)
    op.create_index('idx_dag_run_running_dags', 'dag_run', ['state', 'dag_id'], unique=False)
    op.create_index('idx_dag_run_queued_dags', 'dag_run', ['state', 'dag_id'], unique=False)
    op.create_index('idx_dag_run_dag_id', 'dag_run', ['dag_id'], unique=False)
    op.create_index('dag_id_state', 'dag_run', ['dag_id', 'state'], unique=False)
    op.create_table('festivals',
    sa.Column('festival_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('performer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('venue', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('start_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('end_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('concertful_ranking', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('festival_id', name='festivals_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('dataset_dag_run_queue',
    sa.Column('dataset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('target_dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], name='ddrq_dataset_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_dag_id'], ['dag.dag_id'], name='ddrq_dag_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dataset_id', 'target_dag_id', name='datasetdagrunqueue_pkey')
    )
    op.create_table('ab_user',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('ab_user_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('first_name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('last_name', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('username', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('password', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('email', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('login_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fail_login_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('changed_on', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('changed_by_fk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['changed_by_fk'], ['ab_user.id'], name='ab_user_changed_by_fk_fkey'),
    sa.ForeignKeyConstraint(['created_by_fk'], ['ab_user.id'], name='ab_user_created_by_fk_fkey'),
    sa.PrimaryKeyConstraint('id', name='ab_user_pkey'),
    sa.UniqueConstraint('email', name='ab_user_email_uq'),
    sa.UniqueConstraint('username', name='ab_user_username_uq'),
    postgresql_ignore_search_path=False
    )
    op.create_table('dag_owner_attributes',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('owner', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('link', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name='dag.dag_id', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_id', 'owner', name='dag_owner_attributes_pkey')
    )
    op.create_table('top50_2023_05_11',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_05_11_index', 'top50_2023_05_11', ['index'], unique=False)
    op.create_table('artists_info_2023_04_28',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_04_28_index', 'artists_info_2023_04_28', ['index'], unique=False)
    op.create_table('top50_tracks',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('date_on_top', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('rank_no', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('track_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist1', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist2', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist3', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_tracks_index', 'top50_tracks', ['index'], unique=False)
    op.create_table('ab_permission',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('ab_permission_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='ab_permission_pkey'),
    sa.UniqueConstraint('name', name='ab_permission_name_uq'),
    postgresql_ignore_search_path=False
    )
    op.create_table('job',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('job_type', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('latest_heartbeat', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('executor_class', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('hostname', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('unixname', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='job_pkey')
    )
    op.create_index('job_type_heart', 'job', ['job_type', 'latest_heartbeat'], unique=False)
    op.create_index('idx_job_state_heartbeat', 'job', ['state', 'latest_heartbeat'], unique=False)
    op.create_index('idx_job_dag_id', 'job', ['dag_id'], unique=False)
    op.create_table('dataset_event',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('dataset_event_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('dataset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('extra', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('source_task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('source_dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('source_run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('source_map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='dataset_event_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_dataset_id_timestamp', 'dataset_event', ['dataset_id', 'timestamp'], unique=False)
    op.create_table('artists',
    sa.Column('artist_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('popularity', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('artist_id', name='artists_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('top50_2023_05_09',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_05_09_index', 'top50_2023_05_09', ['index'], unique=False)
    op.create_table('xcom',
    sa.Column('dag_run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('key', sa.VARCHAR(length=512), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('value', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name='xcom_task_instance_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_run_id', 'task_id', 'map_index', 'key', name='xcom_pkey')
    )
    op.create_index('idx_xcom_task_instance', 'xcom', ['dag_id', 'task_id', 'run_id', 'map_index'], unique=False)
    op.create_index('idx_xcom_key', 'xcom', ['key'], unique=False)
    op.create_table('top50_2023_04_28',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_04_28_index', 'top50_2023_04_28', ['index'], unique=False)
    op.create_table('top50_2023_05_03',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_05_03_index', 'top50_2023_05_03', ['index'], unique=False)
    op.create_table('top50_2023_04_27',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_04_27_index', 'top50_2023_04_27', ['index'], unique=False)
    op.create_table('sla_miss',
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('execution_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('email_sent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('notification_sent', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('task_id', 'dag_id', 'execution_date', name='sla_miss_pkey')
    )
    op.create_index('sm_dag', 'sla_miss', ['dag_id'], unique=False)
    op.create_table('artist_album',
    sa.Column('artist_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['album_id'], ['albums.album_id'], name='artist_album_album_id_fkey'),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.artist_id'], name='artist_album_artist_id_fkey')
    )
    op.create_table('concert_genre',
    sa.Column('concert_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('genre_id', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['concert_id'], ['concerts.concert_id'], name='concert_genre_concert_id_fkey'),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.genre_id'], name='concert_genre_genre_id_fkey')
    )
    op.create_table('top50_2023_04_25',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_04_25_index', 'top50_2023_04_25', ['index'], unique=False)
    op.create_table('artist_genre',
    sa.Column('artist_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('genre_id', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.artist_id'], name='artist_genre_artist_id_fkey'),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.genre_id'], name='artist_genre_genre_id_fkey')
    )
    op.create_table('variable',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('key', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('val', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='variable_pkey'),
    sa.UniqueConstraint('key', name='variable_key_uq')
    )
    op.create_table('artists_info_2023_05_11',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_05_11_index', 'artists_info_2023_05_11', ['index'], unique=False)
    op.create_table('task_instance_note',
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('content', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name='task_instance_note_ti_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['ab_user.id'], name='task_instance_note_user_fkey'),
    sa.PrimaryKeyConstraint('task_id', 'dag_id', 'run_id', 'map_index', name='task_instance_note_pkey')
    )
    op.create_table('task_fail',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name='task_fail_ti_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_fail_pkey')
    )
    op.create_index('idx_task_fail_task_instance', 'task_fail', ['dag_id', 'task_id', 'run_id', 'map_index'], unique=False)
    op.create_table('trigger',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('trigger_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('classpath', sa.VARCHAR(length=1000), autoincrement=False, nullable=False),
    sa.Column('kwargs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('triggerer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='trigger_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('top_tracks',
    sa.Column('date_on_top', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('rank_number', sa.SMALLINT(), autoincrement=False, nullable=False),
    sa.Column('track_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('album_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['album_id'], ['albums.album_id'], name='top_tracks_album_id_fkey'),
    sa.ForeignKeyConstraint(['track_id'], ['audio_features.track_id'], name='top_tracks_track_id_fkey'),
    sa.PrimaryKeyConstraint('date_on_top', 'rank_number', name='top_tracks_pkey')
    )
    op.create_table('top50_2023_05_02',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_05_02_index', 'top50_2023_05_02', ['index'], unique=False)
    op.create_table('concerts',
    sa.Column('concert_id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('performer', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('venue', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('location', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('time', postgresql.TIME(), autoincrement=False, nullable=True),
    sa.Column('concertful_ranking', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('concert_id', name='concerts_pkey')
    )
    op.create_table('artist_track',
    sa.Column('artist_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('track_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['artist_id'], ['artists.artist_id'], name='artist_track_artist_id_fkey'),
    sa.ForeignKeyConstraint(['track_id'], ['audio_features.track_id'], name='artist_track_track_id_fkey')
    )
    op.create_table('artists_info_2023_05_09',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_05_09_index', 'artists_info_2023_05_09', ['index'], unique=False)
    op.create_table('artists_info_2023_04_25',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_04_25_index', 'artists_info_2023_04_25', ['index'], unique=False)
    op.create_table('task_instance',
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('duration', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('state', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('try_number', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('max_tries', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=True),
    sa.Column('hostname', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('unixname', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('job_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pool', sa.VARCHAR(length=256), autoincrement=False, nullable=False),
    sa.Column('pool_slots', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('queue', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('priority_weight', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('operator', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('queued_dttm', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('queued_by_job_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('pid', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('executor_config', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('external_executor_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('trigger_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('trigger_timeout', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('next_method', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('next_kwargs', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dag_id', 'run_id'], ['dag_run.dag_id', 'dag_run.run_id'], name='task_instance_dag_run_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['trigger_id'], ['trigger.id'], name='task_instance_trigger_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_id', 'task_id', 'run_id', 'map_index', name='task_instance_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ti_trigger_id', 'task_instance', ['trigger_id'], unique=False)
    op.create_index('ti_state_lkp', 'task_instance', ['dag_id', 'task_id', 'run_id', 'state'], unique=False)
    op.create_index('ti_state', 'task_instance', ['state'], unique=False)
    op.create_index('ti_pool', 'task_instance', ['pool', 'state', 'priority_weight'], unique=False)
    op.create_index('ti_job_id', 'task_instance', ['job_id'], unique=False)
    op.create_index('ti_dag_state', 'task_instance', ['dag_id', 'state'], unique=False)
    op.create_index('ti_dag_run', 'task_instance', ['dag_id', 'run_id'], unique=False)
    op.create_table('albums',
    sa.Column('album_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('album_type', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('label', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('release_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('total_tracks', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('album_id', name='albums_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('ab_user_role',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('role_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['ab_role.id'], name='ab_user_role_role_id_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['ab_user.id'], name='ab_user_role_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ab_user_role_pkey'),
    sa.UniqueConstraint('user_id', 'role_id', name='ab_user_role_user_id_role_id_uq')
    )
    op.create_table('ab_permission_view',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('permission_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('view_menu_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['permission_id'], ['ab_permission.id'], name='ab_permission_view_permission_id_fkey'),
    sa.ForeignKeyConstraint(['view_menu_id'], ['ab_view_menu.id'], name='ab_permission_view_view_menu_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='ab_permission_view_pkey'),
    sa.UniqueConstraint('permission_id', 'view_menu_id', name='ab_permission_view_permission_id_view_menu_id_uq')
    )
    op.create_table('serialized_dag',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('fileloc', sa.VARCHAR(length=2000), autoincrement=False, nullable=False),
    sa.Column('fileloc_hash', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('data_compressed', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('dag_hash', sa.VARCHAR(length=32), autoincrement=False, nullable=False),
    sa.Column('processor_subdir', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('dag_id', name='serialized_dag_pkey')
    )
    op.create_index('idx_fileloc_hash', 'serialized_dag', ['fileloc_hash'], unique=False)
    op.create_table('log',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('dttm', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('map_index', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('event', sa.VARCHAR(length=30), autoincrement=False, nullable=True),
    sa.Column('execution_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('owner', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('extra', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='log_pkey')
    )
    op.create_index('idx_log_event', 'log', ['event'], unique=False)
    op.create_index('idx_log_dttm', 'log', ['dttm'], unique=False)
    op.create_index('idx_log_dag', 'log', ['dag_id'], unique=False)
    op.create_table('artists_info_2023_04_27',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_04_27_index', 'artists_info_2023_04_27', ['index'], unique=False)
    op.create_table('dataset',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('dataset_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('uri', sa.VARCHAR(length=3000), autoincrement=False, nullable=False),
    sa.Column('extra', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('is_orphaned', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='dataset_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_uri_unique', 'dataset', ['uri'], unique=False)
    op.create_table('artists_info_2023_05_03',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_05_03_index', 'artists_info_2023_05_03', ['index'], unique=False)
    op.create_table('dag_pickle',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pickle', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('created_dttm', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('pickle_hash', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='dag_pickle_pkey')
    )
    op.create_table('dagrun_dataset_event',
    sa.Column('dag_run_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_run_id'], ['dag_run.id'], name='dagrun_dataset_event_dag_run_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['event_id'], ['dataset_event.id'], name='dagrun_dataset_event_event_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_run_id', 'event_id', name='dagrun_dataset_event_pkey')
    )
    op.create_index('idx_dagrun_dataset_events_event_id', 'dagrun_dataset_event', ['event_id'], unique=False)
    op.create_index('idx_dagrun_dataset_events_dag_run_id', 'dagrun_dataset_event', ['dag_run_id'], unique=False)
    op.create_table('artists_info_2023_04_29',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_04_29_index', 'artists_info_2023_04_29', ['index'], unique=False)
    op.create_table('dag',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('root_dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=True),
    sa.Column('is_paused', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_subdag', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('last_parsed_time', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_pickled', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_expired', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('scheduler_lock', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('pickle_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('fileloc', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('processor_subdir', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('owners', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('default_view', sa.VARCHAR(length=25), autoincrement=False, nullable=True),
    sa.Column('schedule_interval', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('timetable_description', sa.VARCHAR(length=1000), autoincrement=False, nullable=True),
    sa.Column('max_active_tasks', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_active_runs', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('has_task_concurrency_limits', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('has_import_errors', sa.BOOLEAN(), server_default=sa.text('false'), autoincrement=False, nullable=True),
    sa.Column('next_dagrun', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_dagrun_data_interval_start', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_dagrun_data_interval_end', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('next_dagrun_create_after', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('dag_id', name='dag_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('idx_root_dag_id', 'dag', ['root_dag_id'], unique=False)
    op.create_index('idx_next_dagrun_create_after', 'dag', ['next_dagrun_create_after'], unique=False)
    op.create_table('top50_2023_05_08',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_05_08_index', 'top50_2023_05_08', ['index'], unique=False)
    op.create_table('rendered_task_instance_fields',
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('rendered_fields', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('k8s_pod_yaml', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name='rtif_ti_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dag_id', 'task_id', 'run_id', 'map_index', name='rendered_task_instance_fields_pkey')
    )
    op.create_table('slot_pool',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('pool', sa.VARCHAR(length=256), autoincrement=False, nullable=True),
    sa.Column('slots', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='slot_pool_pkey'),
    sa.UniqueConstraint('pool', name='slot_pool_pool_uq')
    )
    op.create_table('artists_info_2023_05_10',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_05_10_index', 'artists_info_2023_05_10', ['index'], unique=False)
    op.create_table('artists_info_2023_05_05',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_05_05_index', 'artists_info_2023_05_05', ['index'], unique=False)
    op.create_table('artists_info_2023_05_02',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('artist_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('artist_genres', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_artists_info_2023_05_02_index', 'artists_info_2023_05_02', ['index'], unique=False)
    op.create_table('connection',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('conn_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('conn_type', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('host', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('schema', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('login', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('password', sa.VARCHAR(length=5000), autoincrement=False, nullable=True),
    sa.Column('port', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_encrypted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('is_extra_encrypted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('extra', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='connection_pkey'),
    sa.UniqueConstraint('conn_id', name='connection_conn_id_uq')
    )
    op.create_table('data_dictionary',
    sa.Column('var_name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('var_type', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('var_description', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('var_name', name='data_dictionary_pkey')
    )
    op.create_table('data_dict',
    sa.Column('index', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_data_dict_index', 'data_dict', ['index'], unique=False)
    op.create_table('festival_genre',
    sa.Column('festival_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('genre_id', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['festival_id'], ['festivals.festival_id'], name='festival_genre_festival_id_fkey'),
    sa.ForeignKeyConstraint(['genre_id'], ['genres.genre_id'], name='festival_genre_genre_id_fkey')
    )
    op.create_table('top50_2023_05_10',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_05_10_index', 'top50_2023_05_10', ['index'], unique=False)
    op.create_table('import_error',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('timestamp', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('filename', sa.VARCHAR(length=1024), autoincrement=False, nullable=True),
    sa.Column('stacktrace', sa.TEXT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='import_error_pkey')
    )
    op.create_table('dag_code',
    sa.Column('fileloc_hash', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('fileloc', sa.VARCHAR(length=2000), autoincrement=False, nullable=False),
    sa.Column('last_updated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('source_code', sa.TEXT(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('fileloc_hash', name='dag_code_pkey')
    )
    op.create_table('callback_request',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('priority_weight', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('callback_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('callback_type', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('processor_subdir', sa.VARCHAR(length=2000), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='callback_request_pkey')
    )
    op.create_table('top50_2023_04_29',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_04_29_index', 'top50_2023_04_29', ['index'], unique=False)
    op.create_table('log_template',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('log_template_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('filename', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('elasticsearch_id', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='log_template_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('top50_2023_05_05',
    sa.Column('index', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('songs_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('song_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('popularity', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('first_artist', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('all_artists', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_name', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('album_release_date', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('instrumentalness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('type', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('id', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uri', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('track_href', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('analysis_url', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.BIGINT(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.BIGINT(), autoincrement=False, nullable=True)
    )
    op.create_index('ix_top50_2023_05_05_index', 'top50_2023_05_05', ['index'], unique=False)
    op.create_table('task_reschedule',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('task_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('run_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('map_index', sa.INTEGER(), server_default=sa.text("'-1'::integer"), autoincrement=False, nullable=False),
    sa.Column('try_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('start_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('end_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('duration', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('reschedule_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id', 'run_id'], ['dag_run.dag_id', 'dag_run.run_id'], name='task_reschedule_dr_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dag_id', 'task_id', 'run_id', 'map_index'], ['task_instance.dag_id', 'task_instance.task_id', 'task_instance.run_id', 'task_instance.map_index'], name='task_reschedule_ti_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='task_reschedule_pkey')
    )
    op.create_index('idx_task_reschedule_dag_task_run', 'task_reschedule', ['dag_id', 'task_id', 'run_id', 'map_index'], unique=False)
    op.create_index('idx_task_reschedule_dag_run', 'task_reschedule', ['dag_id', 'run_id'], unique=False)
    op.create_table('genres',
    sa.Column('genre_id', sa.SMALLINT(), server_default=sa.text("nextval('genres_genre_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('name', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('genre_id', name='genres_pkey')
    )
    op.create_table('dag_schedule_dataset_reference',
    sa.Column('dataset_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name='dsdr_dag_id_fkey', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dataset_id'], ['dataset.id'], name='dsdr_dataset_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('dataset_id', 'dag_id', name='dsdr_pkey')
    )
    op.create_table('audio_features',
    sa.Column('track_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('acousticness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('danceability', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('energy', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('key', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.Column('loudness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('mode', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('speechiness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('liveness', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('valence', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('tempo', postgresql.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('time_signature', sa.SMALLINT(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('track_id', name='audio_features_pkey')
    )
    op.create_table('tracks',
    sa.Column('track_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('album_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['album_id'], ['albums.album_id'], name='tracks_album_id_fkey'),
    sa.PrimaryKeyConstraint('track_id', name='tracks_pkey')
    )
    op.create_table('dag_tag',
    sa.Column('name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('dag_id', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['dag_id'], ['dag.dag_id'], name='dag_tag_dag_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('name', 'dag_id', name='dag_tag_pkey')
    )
    op.create_table('session',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('session_id', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('data', postgresql.BYTEA(), autoincrement=False, nullable=True),
    sa.Column('expiry', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='session_pkey'),
    sa.UniqueConstraint('session_id', name='session_session_id_key')
    )
    # ### end Alembic commands ###
